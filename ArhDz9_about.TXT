
https://github.com/SB44444/ArhDz9.git
Архитектура ПО (семинары)
Урок 9. Способы организации передачи данных между компонентами приложения, протоколы и API. REST, gRPC, очереди
Материaл с Семинара https://github.com/vyntyk/untitledAPI.git

Итоги и ключевые моменты:
HTTP и REST:

HTTP - протокол передачи данных в сети, используется для взаимодействия между клиентом и сервером.
REST (Representational State Transfer) - архитектурный стиль, который определяет принципы для построения веб-сервисов.
REST API - интерфейс для взаимодействия между клиентами и серверами по принципам REST.
JSON (JavaScript Object Notation):

JSON - легкий формат обмена данными, основанный на синтаксисе JavaScript.
JSON представляет данные в виде пар "ключ-значение" и поддерживает массивы и вложенные структуры.
Часто используется для передачи данных между клиентом и сервером в RESTful API.
Apache Maven:

Maven - инструмент для автоматизации сборки проектов, управления зависимостями и генерации документации.
Основные понятия Maven: проект, артефакт, зависимость, цель, плагин.
Файл "pom.xml" содержит настройки проекта, зависимости и инструкции для сборки.
Пример использования:

Мы создали простое RESTful API с использованием Java HTTP Server API.
Пример демонстрирует обработку GET, POST и DELETE запросов к ресурсу "/users".
Для работы с JSON мы использовали библиотеку Jackson для сериализации и десериализации данных.
Задание Java (Коротко , потому как разбирали на семинаре )
Задачи*:
1. Разработать простой RESTful API для сущности "Книга".
2. Провести тестирование созданного API с помощью инструментов вроде Postman или брузера , как делали на семмнаре

Подробная инструкция:

1. Разработка RESTful API для сущности "Книга"
a. Определение модели "Книга":
- Определите атрибуты для книги: например, ID, название, автор, год издания и т.д.

b. Создание API:
- Используя ваше предпочтительное программное обеспечение или фреймворк (например, Express для Node.js, Flask для Python и т.д.), создайте базовые CRUD операции:
- POST /books - добавить новую книгу.
- GET /books - получить список всех книг.
- GET /books/{id} - получить информацию о конкретной книге по ID.
- PUT /books/{id} - обновить информацию о книге.
- DELETE /books/{id} - удалить книгу.

Задания на Python
Домашнее задание: Разработка и тестирование RESTful API на Python

Цель: Дать студентам практический опыт создания и тестирования RESTful API.

Задачи:
1. Разработать простой RESTful API для сущности "Книга" на Python.
2. Провести базовое тестирование созданного API, используя инструменты Python.

Подробная инструкция:

1. Разработка RESTful API для сущности "Книга" на Python
a. Определение модели "Книга":
- Определите атрибуты для книги: например, ID, название, автор, год издания и т.д.

b. Создание API с использованием Flask:
- Установите Flask (если он еще не установлен): pip install Flask.
- Создайте новый файл Python, например app.py.
- Импортируйте необходимые библиотеки и определите экземпляр приложения Flask.
- Определите маршруты и обработчики для базовых CRUD операций:
- POST /books - добавить новую книгу.
- GET /books - получить список всех книг.
- GET /books/<int:id> - получить информацию о конкретной книге по ID.
- PUT /books/<int:id> - обновить информацию о книге.
- DELETE /books/<int:id> - удалить книгу.

Подсказка: Для сохранения данных во временной базе, вы можете использовать структуры данных Python, например, список словарей.

2. Тестирование API с использованием инструментов Python - По желанию
a. Подготовка к тестированию:

Запустите ваше приложение Flask: python app.py.
Удостоверьтесь, что ваш сервер работает и слушает соответствующий порт (обычно 5000).
b. Базовое тестирование CRUD операций с использованием requests:
- Установите библиотеку requests, если она ещё не установлена: pip install requests.
- Создайте новый файл Python для тестирования, например, test_app.py.
- Импортируйте requests и напишите функции тестирования для каждой CRUD операции, отправляя запросы к вашему API и проверяя ответы.

Подсказка: Проверяйте статусы ответов, а также содержание ответов (например, при добавлении новой книги проверьте, что она действительно добавлена в список).

При выполнении задания, не стесняйтесь использовать доступные вам ресурсы и документацию. Если возникнут сложности, обратитесь за помощью к сокурсникам или преподавателю. Удачи!

Выполнение:
Создан класс Book, с полями ид, название, автор, год издания.
В основном классе методы POST GET DELETE для экземпляров класса Book реализует класс BooksHandler,
имплементируя библиотечный интерфейс HttpHandler, который подгружается через Maven.
RESTful API с использованием Java HTTP Server API использует порт 8081.